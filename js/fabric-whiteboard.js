// Generated by CoffeeScript 1.6.3
(function() {
  
  var Whiteboard, _ref;

  // Make sure to set this toolname from the last function
  var toolname = 'PencilBrush';

  window.WB = (_ref = window.WB) != null ? _ref : {};



  WB.Collaborate = function(wb, canvas) 
  {
    var _this = this;
    this.TJS = TogetherJS;
    this.client = [];
    this.isDrawing = false;

    this.TJS.on('ready', function() 
    { 

      canvas.on('mouse:down', function(data) 
      {
        if (!canvas.isDrawingMode) 
        {
          return;
        }
        _this.isDrawing = true;
        return TogetherJS.send({
          type: 'drawStart',
          point: canvas.getPointer(data.e)
        });
      });

      canvas.on('mouse:move', function(data) 
      {
        if (!_this.isDrawing) 
        {
          return;
        }
        return TogetherJS.send({
          type: 'drawContinue',
          point: canvas.getPointer(data.e)
        });
      });

      canvas.on('mouse:up', function(data) 
      {
        if (!_this.isDrawing) 
        {
          return;
        }
        _this.isDrawing = false;
        return TogetherJS.send({
          type: 'drawEnd'
        });
      });

      _this.modifyObject = function(data) 
      {
        var modifiedIDs, object;
        modifiedIDs = (function() 
        {
          var _i, _len, _ref1, _results;
          if (data.target.objects != null) 
          {
            _ref1 = data.target.objects;
            _results = [];
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) 
            {
              object = _ref1[_i];
              _results.push(canvas.getObjects().indexOf(object));
            }
            return _results;
          } 
          else 
          {
            return [canvas.getObjects().indexOf(data.target)];
          }
        })();

        return TogetherJS.send({
          type: 'objectModified',
          ids: modifiedIDs,
          properties: {
            angle: data.target.getAngle(),
            left: data.target.getLeft(),
            top: data.target.getTop(),
            scale: data.target.getScaleX()
          }
        });
      };

      canvas.on({
        'object:moving': _this.modifyObject,
        'object:scaling': _this.modifyObject,
        'object:resizing': _this.modifyObject,
        'object:rotating': _this.modifyObject
      });

      return canvas.on('selection:cleared', function(data) 
      {
        return TogetherJS.send({
          type: 'selectionEnd'
        });
      });
    });

    this.TJS.on('close', function() 
    {
      return canvas.off({
        'mouse:down': 'mouse:down',
        'mouse:move': 'mouse:move',
        'mouse:up': 'mouse:up',
        'object:moving': 'object:moving',
        'object:scaling': 'object:scaling',
        'object:resizing': 'object:resizing',
        'object:rotating': 'object:rotating'
      });
    });

    this.TJS.hub.on('togetherjs.hello', function() 
    {
      return TogetherJS.send({
        type: 'init',
        data: wb.getSnapshot()
      });
    });

    this.TJS.hub.on('init', function(snapshot) 
    {
      return wb.loadSnapshot(snapshot.data);
    });

    this.TJS.hub.on('drawStart', function(data) 
    {
      var _base, _name;

      if ((_base = _this.client)[_name = data.clientId] == null) 
      {
        // var toolType = "Pencilbrush";
        
        // _base[_name] = new fabric['PencilBrush'](canvas); // origianlly
        // _base[_name] = new fabric.CircleBrush(canvas);
          
            // _base[_name] = new fabric['CircleBrush'](canvas); // origianlly


            // _base[_name].freeDrawingBrush.color = "#ccc";
        
        _base[_name] = new wb._toolType(toolname, canvas);

        console.log(_base[_name]);

        // canvas.freeDrawingBrush.color = "#ccc";
        // canvas.freeDrawingBrush.width = "2";

        // _base[_name] = canvas;

        // _base[_name] = wb._createCanvas('waqas-whiteboard');
        // _base[_name] = wb._myBrush(canvas);
        // _base[_name] = wb._createCanvas(canvas);

      }



      return _this.client[data.clientId].onMouseDown(data.point);
    });

    this.TJS.hub.on('drawContinue', function(data) 
    {
      return _this.client[data.clientId].onMouseMove(data.point);
    });

    this.TJS.hub.on('drawEnd', function(data) 
    {
      return _this.client[data.clientId].onMouseUp();
    });

    this.TJS.hub.on('objectModified', function(data) 
    {
      var id, prop;
      prop = data.properties;
      if (data.ids.length > 1) 
      {
        if (!_this.isSelecting && (_this.selection == null)) 
        {
          _this.selection = new fabric.Group(((function() 
          {
            var _i, _len, _ref1, _results;
            _ref1 = data.ids;
            _results = [];
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) 
            {
              id = _ref1[_i];
              _results.push(canvas.item(id));
            }
            return _results;
          })()).reverse());
          canvas.setActiveGroup(_this.selection, e);
        }
        _this.selection.setAngle(prop.angle).setLeft(prop.left).setTop(prop.top).scale(prop.scale).setCoords(true);
        _this.selection.saveCoords();
        _this.isSelecting = true;
        return canvas.renderAll();
      } 
      else 
      {
        canvas.item(data.ids[0]).setAngle(prop.angle).setLeft(prop.left).setTop(prop.top).scale(prop.scale).setCoords();
        return canvas.renderAll();
      }
    });

    return this.TJS.hub.on('selectionEnd', function(data) {
      if (!_this.isSelecting || (_this.selection == null)) {
        return;
      }
      _this.selection = void 0;
      return _this.isSelecting = false;
    });

  };







  WB.Core = (function() 
  {
    function Core(id, callback) 
    {
      this.id = id;
      this.callback = callback;
      this.canvas = this._createCanvas(this.id);
      this._resizeCanvas($(window).outerWidth(), $(window).outerHeight());
      this.callback(this, this.canvas);
    }

    // For Parent Windows I'm making changes here
    Core.prototype._createCanvas = function(id) 
    {
      var canvasCreate = new fabric.Canvas(id);
          canvasCreate.freeDrawingBrush = new fabric['PencilBrush'](canvasCreate);
          canvasCreate.freeDrawingBrush.color = "#CCC";
          canvasCreate.freeDrawingBrush.width = "5";
          canvasCreate.freeDrawingBrush.shadowBlur = "10";
      
      // console.log(canvasCreate.freeDrawingBrush);

      return canvasCreate;
    };

    // For Collabrative windows or Child window I'm calling this function from wb.collabtrative
    Core.prototype._toolType = function(toolname, canvasReceived) 
    {
      // toolname = "PencilBrush";

      // if(toolname == 'pencilbrush' || toolname == 'Pencilbrush')
      // {
        // console.log(canvasReceived.contextContainer.fillStyle);

        var canvasSend;

        // canvasBrush =  new fabric.PencilBrush(canvasReceived);
        // canvasBrush.canvas.freeDrawingBrush.color = "#660000";

        // canvasReceived.contextContainer.fillStyle = "#ccc";
        // canvasReceived.contextCache.fillStyle = "#ccc";
        // canvasReceived.contextTop.fillStyle = "#ccc";
        
        // canvasReceived.contextContainer.strokeStyle = "#ccc";
        // canvasReceived.contextCache.strokeStyle = "#ccc";
        // canvasReceived.contextTop.strokeStyle = "#ccc";
           
        canvasSend = new fabric['PencilBrush'](canvasReceived);
        // canvasBrush.canvas.freeDrawingBrush.color = "#660000";

        // console.log(canvasSend);
        
        return canvasSend;
      // }


      
    };

    // Core.prototype._myBrush = function(canvas)
    // {
    //   // canvas.freeDrawingBrush = new fabric['CircleBrush'](canvas);
      
    //   toolType = "PencilBrush";
      
    //   // canvas.freeDrawingBrush.color = "#ccc";
    //   // canvas.freeDrawingBrush.width = "2";
    //   // canvas.freeDrawingBrush.shadow = "1";

    //   // console.log(canvas.freeDrawingBrush);
      
    //   return canvas;
    // };




    Core.prototype._resizeCanvas = function(width, height) 
    {
      this.canvas.setHeight(height);
      return this.canvas.setWidth(width);
    };

    Core.prototype.setTool = function(type) 
    {
      this.tool = type;
      switch (this.tool) 
      {
        case 'pencil':
          return this.canvas.isDrawingMode = true;
        case 'circle':
          return this.canvas.isDrawingMode = true;
        case 'spray':
          return this.canvas.isDrawingMode = true;
        default:
          return this.canvas.isDrawingMode = false;
      }
    };

    Core.prototype.getSnapshot = function() 
    {
      return JSON.stringify(this.canvas);
    };

    Core.prototype.loadSnapshot = function(data) 
    {
      return this.canvas.loadFromJSON(data, this.canvas.renderAll.bind(this.canvas));
    };

    return Core;

  })();






  Whiteboard = new WB.Core('waqas-whiteboard', WB.Collaborate);

  (function($) 
  {
    return $('li[data-tool]').click(function() 
    {
      $(this).parent().find('li').removeClass('active');
      $(this).toggleClass('active');
      return Whiteboard.setTool($(this).data('tool'));
    });
  })
  (jQuery);


  (function($)
  {
    $("#Drawing_Mode").val('Circle');
    
    // document.getElementById('Drawing_Mode').onchange = function()
    // {
    //   var changeVal = document.getElementById('Drawing_Mode').value;
    //   this._myBrush();
      
    // };
  
  })(jQuery);

}).call(this);
